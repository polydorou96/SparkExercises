from pathlib import Path

from pyspark.sql import SparkSession, DataFrame, Window
from pyspark.sql.functions import *
from pyspark.sql.types import StructType, FloatType

from dao.logger import setup_logger


def initiate_spark_session(app_name: str) -> SparkSession:
    return SparkSession.builder.appName(app_name).getOrCreate()


def read_schema_into_df(spark_session: SparkSession, root_directory: Path) -> DataFrame:
    parquet_files = list(root_directory.glob("*.parquet"))
    return spark_session.read.option("inferSchema", "true").parquet(*[str(file) for file in parquet_files])


def count_number_of_applications(applications_df: DataFrame) -> int:
    return applications_df.count()


def get_average_profit(applications_df: DataFrame, loans_df: DataFrame) -> float:
    approved_applications = applications_df.filter(col('status') == 'approved')
    approved_applications_loans = approved_applications.join(loans_df, on="loan_id", how="inner")

    sum_of_profit = approved_applications_loans.select(sum('commission'))

    average_of_profit = sum_of_profit.collect()[0][0] / applications_df.count()
    return average_of_profit


def get_popular_marketing_sources(applications_df: DataFrame, loans_df: DataFrame,
                                  marketing_sources_df: DataFrame) -> DataFrame:
    # Get approved applications
    approved_applications = applications_df.filter(col('status') == 'approved')

    # Join approved applications with loans and marketing source dfs
    approved_applications_loans = approved_applications.join(loans_df, on="loan_id", how="inner")
    approved_applications_loans_sources = approved_applications_loans.join(marketing_sources_df, on="source_id",
                                                                           how="inner")
    # Join the dataframes and group by loan name and source name to get the number of applications
    counts_df = approved_applications_loans_sources.groupBy("loan_name", "source_name").agg(
        count("app_id").alias("number_of_applications"))

    # Partition by loan name to get the most application counts per loan name in descending order
    window_spec = Window.partitionBy("loan_name").orderBy(counts_df["number_of_applications"].desc())

    # Get ranked sources for each loan type
    ranked_sources_df = counts_df.withColumn("ranked_source_name", row_number().over(window_spec))

    # Get the top 2 sources for each loan type
    first_most_popular = ranked_sources_df.filter(ranked_sources_df["ranked_source_name"] == 1).select("loan_name",
                                                                                                       "source_name").withColumnRenamed(
        "source_name", "Most popular")
    second_most_popular = ranked_sources_df.filter(ranked_sources_df["ranked_source_name"] == 2).select("loan_name",
                                                                                                        "source_name").withColumnRenamed(
        "source_name", "Second most popular")

    popular_sources_df = first_most_popular.join(second_most_popular, on="loan_name", how="inner").orderBy(
        "loan_name"
    )
    return popular_sources_df


def get_profit_percentage_from_each_marketing_source(applications_df: DataFrame, loans_df: DataFrame,
                                                     marketing_sources_df: DataFrame) -> DataFrame:
    # Get approved applications
    approved_applications = applications_df.filter(col('status') == 'approved')

    # Join approved applications with loans and marketing source dfs
    approved_applications_loans = approved_applications.join(loans_df, on="loan_id", how="inner")
    approved_applications_loans_sources = approved_applications_loans.join(marketing_sources_df, on="source_id",
                                                                           how="inner")

    # Get overall profit generated by each marketing source on a given day, include daily target in the group by
    # statement as we are expecting each source to have the same daily target each day
    daily_profit = approved_applications_loans_sources.groupBy("date", "source_name", "daily_target").agg(
        sum(col("commission")).alias("daily_profit")
    )

    # Get the percentage of the daily target
    daily_target_percentage = daily_profit.withColumn(
        "Daily Target %",
        when(col("daily_target") > 0, (col("daily_profit") / col("daily_target")) * 100).otherwise(0)
    ).orderBy("date", "source_name")

    return daily_target_percentage


if __name__ == "__main__":
    logger = setup_logger()
    logger.info("Initiating spark session...")
    spark = initiate_spark_session(app_name='LoanApplicationsAnalysis')
    spark.sparkContext.setLogLevel("OFF")

    logger.info("Loading parquet files in spark dataframes...")
    loan_df = read_schema_into_df(spark_session=spark,
                                  root_directory=Path("input/spark-interview/loans_parquet"))
    application_df = read_schema_into_df(spark_session=spark,
                                         root_directory=Path("input/spark-interview/applications_parquet"))
    marketing_source_df = read_schema_into_df(spark_session=spark,
                                              root_directory=Path("input/spark-interview/sources_parquet"))

    exercise1 = count_number_of_applications(applications_df=application_df)
    logger.info(f"We have collected a total number of {exercise1} applications")
    exercise2 = get_average_profit(applications_df=application_df, loans_df=loan_df)
    logger.info(f"The average profit of all applications is {exercise2}")
    exercise3 = get_popular_marketing_sources(applications_df=application_df, loans_df=loan_df,
                                              marketing_sources_df=marketing_source_df)
    logger.info(f"These are the top 2 popular marketing sources: {exercise3.show()}")
    exercise4 = get_profit_percentage_from_each_marketing_source(applications_df=application_df, loans_df=loan_df,
                                                                 marketing_sources_df=marketing_source_df)
    logger.info(f"These are the percentage profits from each marketing source:{exercise4.show()}")
    a = True
